<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My webzone]]></title>
  <link href="http://johnbintz.github.com/atom.xml" rel="self"/>
  <link href="http://johnbintz.github.com/"/>
  <updated>2012-02-16T16:47:43-05:00</updated>
  <id>http://johnbintz.github.com/</id>
  <author>
    <name><![CDATA[John Bintz]]></name>
    <email><![CDATA[john@coswellproductions.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RVM, the JSON gem, the @global gemset, and rb_gc bugs]]></title>
    <link href="http://johnbintz.github.com/blog/2012/02/16/rvm-default-gemset-json-gem/"/>
    <updated>2012-02-16T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/02/16/rvm-default-gemset-json-gem</id>
    <content type="html"><![CDATA[<p>Upon building Ruby 1.9.3-p125 on my Snow Leopard Mac and getting ready to take it for a spin, trying to run anything of note in a Rails app brought the following cryptic error:</p>

<pre><code>[BUG] cross-thread violation on rb_gc()
(null)

Abort trap
</code></pre>

<p>Digging into Console.app, the backtrace indicated that the system <code>libruby.1.dylib</code> was being accessed from the C parser in the <code>json</code> gem living in the <code>@global</code>
RVM gemset. <code>otool -L</code> confirmed that the parser in the <code>@global</code> gemset was linked against system ruby, not RVM ruby. Installing a new <code>json</code> gem into the current gemset didn&#8217;t work, as RVM prefers to use the <code>@global</code> version of the gem over the one in the current gemset,
it seems. Deleting the gems from the <code>@global</code> gemset and reinstalling the <code>json</code> gem in the current gemset worked, and I&#8217;m sure I could have reinstalled the
<code>json</code> gem globally too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependent APIs and expires_in in Cucumber]]></title>
    <link href="http://johnbintz.github.com/blog/2012/02/06/expires_in-and-dependent-apis-in-cucumber/"/>
    <updated>2012-02-06T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/02/06/expires_in-and-dependent-apis-in-cucumber</id>
    <content type="html"><![CDATA[<p>The setup:</p>

<ul>
<li>Cucumber</li>
<li>Capybara</li>
<li><code>capybara-webkit</code></li>
<li>A running Rails API (started up using <a href="http://github.com/johnbintz/vegetable_glue/">vegetable_glue</a>)</li>
<li>Active Resource for moving objects around</li>
</ul>


<p>The problem:</p>

<p>A particular dependent API request wasn&#8217;t making it back to the app under test nor the browser. The
request was actually being proxied through the app, pretty much raw from the API and not re-run
through Active Resource before being sent to the browser.</p>

<p>The issue:</p>

<p>An <code>expires_in</code> in the controller method was sending along cache information, causing the stale data to
be cached <em>somewhere</em>.</p>

<p>The solution:</p>

<p>In <code>config/environments/cucumber.rb</code> on the API:</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">ActionController::ConditionalGet</span>
  <span class="k">def</span> <span class="nf">expires_in</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>


<p>Punch them ducks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The cleanest Bundler env]]></title>
    <link href="http://johnbintz.github.com/blog/2012/02/02/the-cleanest-bundler-env/"/>
    <updated>2012-02-02T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/02/02/the-cleanest-bundler-env</id>
    <content type="html"><![CDATA[<p>Running commands in a Bundler-enabled app that has a Git repo attached to it makes running Bundler in subshells a pain.
<code>Bundler.with_clean_env</code> gets close, but still leaves enough of Bundler around to be unpleasant. This kills it dead
in subshells:</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">Bundler</span>
  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
    <span class="k">def</span> <span class="nf">with_sparkling_clean_env</span>
      <span class="n">oenv</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">.</span><span class="n">to_hash</span>

      <span class="sx">%w{BUNDLE_GEMFILE RUBYOPT GEM_HOME GIT_DIR GIT_WORK_TREE}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="no">ENV</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">}</span>

      <span class="k">yield</span>

      <span class="no">ENV</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">oenv</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[falcon patch adventures for ruby 1.9.3]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/31/falcon-patch-adventures-for-ruby-1.9.3/"/>
    <updated>2012-01-31T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/31/falcon-patch-adventures-for-ruby-1.9.3</id>
    <content type="html"><![CDATA[<p>OK, I got the super-cool <a href="https://gist.github.com/1688857">falcon patch</a> (as it&#8217;s known in rvm) working on my Snow Leopard Macs, but had a few
issues with it, and not because of the patch itself:</p>

<ul>
<li>For some reason, building any 1.9.3 in rvm on my machines screws up the Makefile and sticks in a circular reference to
building the ruby executable (as in, dependency ruby => ruby). Have to always rip out that last line in the Makefile
and <code>make ; make install</code>.</li>
<li>As rvm so succinctly warned me (I had no idea <code>rvm requirements</code> existed!), GCC &amp; associated bits in the default Snow
Leopard XCode release are broken. I was getting segfaults on garbage collection within the cached load path part of
the patch, which is where the real speed came from. I installed <a href="https://github.com/kennethreitz/osx-gcc-installer">osx-gcc-installer</a>
and removed the rest of XCode, then recompiled and everything worked fine.</li>
</ul>


<p>How much of an improvement for me? 3 RSpec runs of a big app went from 2:40.742s (1.9.2-p290 with load patch) to 1:48.104s (1.9.3-p0 with falcon patch).
A 33% speed increase. Sweet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Under SOPA, this site is now liable for damages]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/18/under-sopa-this-site-is-now-liable/"/>
    <updated>2012-01-18T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/18/under-sopa-this-site-is-now-liable</id>
    <content type="html"><![CDATA[<p><a href="http://www.youtube.com/">YouTube</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript in my jQuery: Objects as data containers]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/15/javascript-in-my-jquery-objects-as-data-containers/"/>
    <updated>2012-01-15T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/15/javascript-in-my-jquery-objects-as-data-containers</id>
    <content type="html"><![CDATA[<p>Sometimes you have to pass in options to jQuery functions like this:</p>

<div class="highlight"><pre><code class="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
  <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;300px&#39;</span><span class="p">,</span>
  <span class="nx">opacity</span><span class="o">:</span> <span class="mf">0.75</span><span class="p">,</span>
<span class="p">});</span>
</code></pre>
</div>


<p>This:</p>

<div class="highlight"><pre><code class="js"><span class="p">{</span>
  <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;300px&#39;</span><span class="p">,</span>
  <span class="nx">opacity</span><span class="o">:</span> <span class="mf">0.75</span>
<span class="p">}</span>
</code></pre>
</div>


<p>is the most basic form of an <em>Object</em>. Objects have two things: <em>properties</em>
and <em>methods</em>. When you attach other things to an object, like the String <code>300px</code>
or the Number <code>0.75</code>, you&#8217;re creating properties.</p>

<p><em>Methods</em> are Functions attached to an object. When you extend <code>jQuery.fn</code> with your
own jQuery actions, you&#8217;re creating a new method:</p>

<div class="highlight"><pre><code class="js"><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">makeAllTranslucent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
    <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;300px&#39;</span><span class="p">,</span>
    <span class="nx">opacity</span><span class="o">:</span> <span class="mf">0.75</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// now you have a shortcut!</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">makeAllTranslucent</span><span class="p">();</span>
</code></pre>
</div>


<p>You can add and change properties on an object after-the-fact, too:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">height</span><span class="o">:</span> <span class="s2">&quot;300px&quot;</span> <span class="p">};</span>
<span class="k">if</span> <span class="nx">confirm</span><span class="p">(</span><span class="s2">&quot;Want them translucent?&quot;</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">properties</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">=</span> <span class="mf">0.75</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// pass the object in as the first parameter</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">(</span><span class="nx">properties</span><span class="p">);</span>
</code></pre>
</div>


<p>Because of the way JavaScript is designed, everything is an object: the
one you created with <code>{curly: 'brackets'}</code>, <code>$.fn</code>, standalone Functions,
everything. This lets developers do some very clever things with JavaScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript in my jQuery: the magic $(this)]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/14/javascript-in-my-jquery-the-magic-this/"/>
    <updated>2012-01-14T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/14/javascript-in-my-jquery-the-magic-this</id>
    <content type="html"><![CDATA[<p>Say you&#8217;re looping over some elements on the page:</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;div&gt;</span>One<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>Two<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>Three<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;unvisited&#39;</span><span class="p">);</span>
<span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre>
</div>


<p>Within the <em>anonymous function</em>:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;unvisited&#39;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
</div>


<p><code>this</code> becomes each jQuery object found in <code>$('div')</code> in turn. But how?</p>

<p>That <code>this</code> normally means <em>the object running the current code</em>:</p>

<div class="highlight"><pre><code class="javascript"><span class="c1">// create a class constructor</span>
<span class="kd">function</span> <span class="nx">Cat</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// add a method to the object</span>
<span class="nx">Cat</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hiss</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is hissing at you!&quot;</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// instantiate a Cat</span>
<span class="kd">var</span> <span class="nx">myCat</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cat</span><span class="p">(</span><span class="s2">&quot;Fluffy&quot;</span><span class="p">);</span>

<span class="c1">// work with our cat</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myCat</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// =&gt; Fluffy</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myCat</span><span class="p">.</span><span class="nx">hiss</span><span class="p">());</span> <span class="c1">// =&gt; Fluffy is hissing at you!</span>
</code></pre>
</div>


<p>But JavaScript lets you change <code>this</code> to whatever object you want using <code>Function#apply</code>:</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s2">&quot;Bruiser&quot;</span><span class="p">);</span>

<span class="c1">// Cat.prototype.hiss is an object of type Function</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Cat</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hiss</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">dog</span><span class="p">));</span> <span class="c1">// =&gt; Bruiser is hissing at you!</span>
</code></pre>
</div>


<p>jQuery does this with the <code>jQuery.fn#each</code> method when looping over things like DOM elements. <code>this</code>
becomes a jQuery object for each DOM node in turn:</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// the first run through, `this` is $(&#39;div:eq(0)&#39;)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:eq(0)&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span> <span class="c1">// =&gt; &#39;&#39;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:eq(1)&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span> <span class="c1">// =&gt; &#39;&#39;</span>

  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;uninvited&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:eq(0)&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span> <span class="c1">// =&gt; &#39;uninvited&#39;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:eq(1)&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span> <span class="c1">// =&gt; &#39;&#39;</span>
<span class="p">});</span>
</code></pre>
</div>


<p>For polyglots: This is very similar in concept to how <code>instance_eval</code> can be used in Ruby:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">code</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">puts</span> <span class="vi">@name</span> <span class="p">}</span>

<span class="k">class</span> <span class="nc">Dog</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">;</span> <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span> <span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>

<span class="n">my_dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Bruiser&quot;</span><span class="p">)</span>

<span class="n">my_dog</span><span class="o">.</span><span class="n">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">code</span><span class="p">)</span> <span class="c1">#=&gt; &quot;Bruiser&quot;</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript in my jQuery: $(document).ready()]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/13/javascript-in-my-jquery-document-ready/"/>
    <updated>2012-01-13T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/13/javascript-in-my-jquery-document-ready</id>
    <content type="html"><![CDATA[<p>In jQuery, you normally write code like this to do something after the whole page loads:</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  <span class="c1">// the long way...</span>
  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#login-box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;slow&#39;</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="c1">// the short way...</span>
  <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#login-box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;slow&#39;</span><span class="p">);</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre>
</div>


<p>There&#8217;s two things going on here:</p>

<ul>
<li>You&#8217;re attaching an <em>event handler</em> to a thing that <em>fires</em> an event. Specifically, the event that fires when
all the parts of your Web page have finished loading and that the <em>document</em> is <em>ready</em>.</li>
<li>That event handler:</li>
</ul>


<div class="highlight"><pre><code class="javascript">  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#login-box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;slow&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  
</code></pre>
</div>


<p>  is what&#8217;s known as an <em>anonymous function</em>. Normally functions get names:</p>

<div class="highlight"><pre><code class="javascript">  <span class="kd">function</span> <span class="nx">doSomething</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#login-box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;slow&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  
</code></pre>
</div>


<p>  But, you can also create a function that doesn&#8217;t have a name&#8230;it&#8217;s <em>anonymous</em>. You use these a lot in jQuery.
  They come in pretty handy and have a lot of interesting properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber, Capybara, and Rails Asset Pipeline in debug mode]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/07/cucumber-capybara-asset-pipeline-debug-mode/"/>
    <updated>2012-01-07T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/07/cucumber-capybara-asset-pipeline-debug-mode</id>
    <content type="html"><![CDATA[<p>Because who wants to recompile all their assets on each run?</p>

<h2>features/support/env.rb</h2>

<div class="highlight"><pre><code class="ruby"><span class="no">Capybara</span><span class="o">.</span><span class="n">server_port</span> <span class="o">=</span> <span class="mi">3001</span>
<span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:3001&quot;</span>

<span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span>
</code></pre>
</div>


<h2>config/environments/cucumber.rb</h2>

<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span>
<span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre>
</div>


<p>You&#8217;re welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Years Resolution #1]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/04/new-years-resolution-one/"/>
    <updated>2012-01-04T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/04/new-years-resolution-one</id>
    <content type="html"><![CDATA[<p>Pay off the technical debt, especially in my test suites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment: Cucumber step definitions in separate files]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/03/cucumber-step-definitions-in-separate-files/"/>
    <updated>2012-01-03T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/03/cucumber-step-definitions-in-separate-files</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been getting back into using <a href="http://cukes.info/">Cucumber</a> for integration/acceptance testing,
but I didn&#8217;t want to repeat one of the mistakes I made in the past: bloated step definition files.
There were often step definitions I wanted to use globally for things like making files and such, and
I didn&#8217;t want to have <code>massive_file_steps.rb</code> with 100 step definitions anymore.</p>

<p>So instead of having a setup like this:</p>

<pre><code>features/
  step_definitions/
    foo_steps.rb
    bar_steps.rb
  foo.feature
  bar.feature
</code></pre>

<p>With <code>foo_steps.rb</code> containing code like this:</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Given</span><span class="sr"> /I have a cat/</span> <span class="k">do</span>
  <span class="vi">@cat</span> <span class="o">=</span> <span class="no">Cat</span><span class="o">.</span><span class="n">new</span>
<span class="k">end</span>

<span class="no">When</span><span class="sr"> /I pet the cat/</span> <span class="k">do</span>
  <span class="vi">@result</span> <span class="o">=</span> <span class="vi">@cat</span><span class="o">.</span><span class="n">pet</span>
<span class="k">end</span>

<span class="no">Then</span><span class="sr"> /the cat should not have hissed/</span> <span class="k">do</span>
  <span class="vi">@cat</span><span class="o">.</span><span class="n">should_not</span> <span class="n">have_hissed</span>
<span class="k">end</span>
</code></pre>
</div>


<p>I am now trying this:</p>

<pre><code>features/
  step_definitions/
    given/
      i_have_a_cat.rb
    when/
      i_pet_the_cat.rb
    then/
      cat_should_not_have_hissed.rb
  foo.feature
  bar.feature
</code></pre>

<p>It seems to be working so far, but we&#8217;ll see how it scales.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SketchBook Comics - "Bad At Comebacks"]]></title>
    <link href="http://johnbintz.github.com/blog/2011/12/31/sketchbook-comic-bad-at-comebacks/"/>
    <updated>2011-12-31T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2011/12/31/sketchbook-comic-bad-at-comebacks</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a comic I did in SketchBook for Android, which seriously needs more layers and
the ability to change the canvas size:</p>

<p><img src="http://johnbintz.github.com/assets/sketchbook-comics/dawn-bad-at-comebacks.jpg"><br /></p>

<p>Thanks to a certain boss of mine for providing the capacitive touch stylus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Christmas Party Drawings]]></title>
    <link href="http://johnbintz.github.com/blog/2011/12/20/christmas-party-drawings/"/>
    <updated>2011-12-20T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2011/12/20/christmas-party-drawings</id>
    <content type="html"><![CDATA[<p>Every year at work I draw on the whiteboard in whatever room we have our Christmas party in. Here&#8217;s this year&#8217;s
result, including hastily fingerpainted thumbnail done in Sketchbook:</p>

<p><img src="http://johnbintz.github.com/assets/christmas-drawings-2011/whiteboard-thumbnail.png"><br />
<img src="http://johnbintz.github.com/assets/christmas-drawings-2011/whiteboard-inks.jpg"><br /></p>

<p>And here&#8217;s one of a coworker wearing reindeer antlers, fingerpainted in Sketchbook:</p>

<p><img src="http://johnbintz.github.com/assets/christmas-drawings-2011/kelly-reindeer.jpg"><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net::IMAP SSL Verify Mode]]></title>
    <link href="http://johnbintz.github.com/blog/2011/12/14/net-imap-ssl-verify-mode/"/>
    <updated>2011-12-14T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2011/12/14/net-imap-ssl-verify-mode</id>
    <content type="html"><![CDATA[<p>Get this error doing IMAP stuff?</p>

<p><code>SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (OpenSSL::SSL::SSLError)</code></p>


<p>Try this:</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Net</span><span class="o">::</span><span class="no">IMAP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="ss">:ssl</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:verify_mode</span> <span class="o">=&gt;</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_NONE</span> <span class="p">})</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine Headless WebKit Presentation]]></title>
    <link href="http://johnbintz.github.com/blog/2011/12/12/jhw-presentation/"/>
    <updated>2011-12-12T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2011/12/12/jhw-presentation</id>
    <content type="html"><![CDATA[<p>If you&#8217;re looking for the current iteration of my <a href="http://johnbintz.github.com/jasmine-headless-webkit/">Jasmine Headless WebKit</a> presentation, which
covers more nuts and bolts of JHW rather than Jasmine itself, it&#8217;s here: <a href="http://johnbintz.github.com/jasmine-headless-webkit-presentation">http://johnbintz.github.com/jasmine-headless-webkit-presentation</a></p>

<p>Even if JS testing isn&#8217;t your thing, I do have a few cool things going on in here:</p>

<ul>
<li>I&#8217;m using a custom Guard that uses Sprockets to regenerate the presentation&#8217;s CSS and JS</li>
<li>I have Solarized Light colors on whatever I can style</li>
<li>I plugged Rack::LiveReload in front of ShowOff so the browser reloads as I work on the slides</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regenerating Self-Signed Citadel Certificates]]></title>
    <link href="http://johnbintz.github.com/blog/2011/12/05/regeneration-self-signed-citadel-certificates/"/>
    <updated>2011-12-05T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2011/12/05/regeneration-self-signed-citadel-certificates</id>
    <content type="html"><![CDATA[<p>From <a href="http://www.citadel.org/doku.php/faq:systemadmin:how_to_install_a_certificate_signed_by_a_recognized_certificate_authority#problemswithcitadelsautogeneratedcertificates">citadel.org</a>:</p>

<div class="highlight"><pre><code class="bash">service webcit stop
service citadel stop
<span class="nb">cd</span> /etc/ssl
rm -Rf citadel/* webcit/*
<span class="nb">export </span><span class="nv">O</span><span class="o">=</span><span class="s2">&quot;Your Organization&quot;</span>
<span class="nb">export </span><span class="nv">OU</span><span class="o">=</span><span class="s2">&quot;Your Server&quot;</span>
<span class="nb">export </span><span class="nv">CN</span><span class="o">=</span><span class="s2">&quot;*&quot;</span>
service citadel start
service webcit start
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Hypercool Automagic Rails 3.1/Guard Setup]]></title>
    <link href="http://johnbintz.github.com/blog/2011/12/05/my-hypercool-automagic-rails-guard-setup/"/>
    <updated>2011-12-05T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2011/12/05/my-hypercool-automagic-rails-guard-setup</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a guide on how I set up all my Rails stuff. Having now written one, I can join the elite group of people who write guides on how they set up all
their Rails stuff.</p>

<h2>What this guide covers</h2>

<ul>
<li>Rails 3.1 gem setup for maximum automagic fun and less headdesking.</li>
<li>Guard setup for guarding your Rails server, RSpec tests, JavaScript testing, and LiveReloading.</li>
<li>Making <code>jasmine-headless-webkit</code>, your app, and Sprockets play nice.</li>
<li>Precompiling your assets locally and shoving them up to your deploy location using Capistrano.</li>
</ul>


<h3>Why this approach?</h3>

<p>&#8216;cause it works pretty well for me, and it&#8217;s my guide, so <em>there</em>.</p>

<h3><code>jasmine-headless-webkit</code> version requirements</h3>

<p>The stuff in this guide requires at least version <em>0.8.3</em>. Make sure you&#8217;re using the most recent version if you wants the Sprockets goodness.</p>

<h2>Rails 3.1 Gem Setup</h2>

<p>There are only two tricks: having <code>compass</code> load before <code>sass-rails</code> to ensure all the cool Compass bits actually work, and having all of your
asset pipeline stuff <em>(all of it)</em> in a group called <code>:assets</code>, that also happens to be part of your <code>:development</code> group. Everything else
is pretty straightforward. If you plan on using asset pipeline gems in your <code>jasmine-headless-webkit</code> setup, you can put them anywhere, as no specific
groups are loaded or required when using JHW like they are with Rails:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">group</span> <span class="ss">:assets</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;compass&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.12.alpha&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span>

  <span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;backbone-rails&#39;</span>
  <span class="c1"># ... blah blah blah ...</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="c1"># for js testing...</span>
  <span class="n">gem</span> <span class="s1">&#39;jasmine-headless-webkit&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.8.0&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;jasmine-spec-extras&#39;</span>

  <span class="c1"># for laziness...</span>
  <span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;guard-rails&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;guard-jasmine-headless-webkit&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;guard-livereload&#39;</span>

  <span class="c1"># for awesome rack middleware</span>
  <span class="n">gem</span> <span class="s1">&#39;rack-livereload&#39;</span>
<span class="k">end</span>
</code></pre>
</div>


<h3>Why does order matter? It&#8217;s a Gemfile, right?</h3>

<p>&#8216;cause Rails (roughly) does:</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_GROUPS&#39;</span><span class="o">]</span><span class="p">)</span>
</code></pre>
</div>


<p>&#8230; which requires the files in your Gemfile in the order in which they are defined. If Compass defines the necessary asset pipeline stuff first,
Sass-Rails won&#8217;t stomp on it and everything works all happy-like.</p>

<h2>Guard setup</h2>

<p>If you don&#8217;t know Guard, the you&#8217;re out of the loop. All the lazy programmers are using it. Any by &#8220;lazy&#8221; I mean super-cool.</p>

<p>Create a <code>Guardfile</code> for your project by doing this in your shell:</p>

<div class="highlight"><pre><code class="bash"><span class="k">for </span>guard in rails rspec jasmine-headless-webkit livereload ; <span class="k">do</span>
<span class="k">  </span>bundle <span class="nb">exec </span>guard init <span class="nv">$guard</span>
<span class="k">done</span>
</code></pre>
</div>


<p>Then, split those Guards up into groups. I typically have three: one for the Rails server and LiveReload, one for RSpec, and one for JHW:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">guard</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="ss">:version</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:all_on_start</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="k">do</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^spec/.+_spec\.rb}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">&#39;/acceptance/&#39;</span><span class="o">]</span> <span class="p">?</span> <span class="kp">nil</span> <span class="p">:</span> <span class="n">m</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^lib/(.+)\.rb}</span><span class="p">)</span>     <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/lib/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;spec/spec_helper.rb&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;spec&quot;</span> <span class="p">}</span>

    <span class="c1"># Rails example</span>
    <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;spec/spec_helper.rb&#39;</span><span class="p">)</span>                       <span class="p">{</span> <span class="s2">&quot;spec&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;app/controllers/application_controller.rb&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;spec/controllers&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/(.+)\.rb}</span><span class="p">)</span>                           <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/views/(.*)$}</span><span class="p">)</span>                        <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/views/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^lib/(.+)\.rb}</span><span class="p">)</span>                           <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/lib/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/controllers/(.+)_(controller)\.rb}</span><span class="p">)</span>  <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="o">[</span><span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">s/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;spec/acceptance/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span><span class="o">]</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:js</span> <span class="k">do</span>
  <span class="n">spec_location</span> <span class="o">=</span> <span class="s2">&quot;spec/javascripts/%s_spec&quot;</span>

  <span class="n">guard</span> <span class="s1">&#39;jasmine-headless-webkit&#39;</span><span class="p">,</span> <span class="ss">:all_on_start</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="k">do</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/assets/javascripts/(.*)\.(js|coffee)}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">newest_js_file</span><span class="p">(</span><span class="n">spec_location</span> <span class="o">%</span> <span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^spec/javascripts/(.*)_spec\..*}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">newest_js_file</span><span class="p">(</span><span class="n">spec_location</span> <span class="o">%</span> <span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^spec/javascripts/.*_helper.coffee$}</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;spec/javascripts/**/*_spec.*&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:rails</span> <span class="k">do</span>
  <span class="n">guard</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="ss">:force_run</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:server</span> <span class="o">=&gt;</span> <span class="ss">:thin</span> <span class="k">do</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">/^Gemfile.lock$/</span><span class="p">)</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">/^config\/.*\.(rb|yml)$/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="k">if</span> <span class="o">!</span><span class="n">m</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">&#39;/locales/&#39;</span><span class="o">]</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">guard</span> <span class="s1">&#39;livereload&#39;</span><span class="p">,</span> <span class="ss">:grace_period</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="k">do</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app\/.+\.(erb|haml|jst|hamljs|coffee)$}</span><span class="p">)</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app/assets/stylesheets/(.*)$}</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;assets/application.css&#39;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">/app\/helpers\/.+\.rb/</span><span class="p">)</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">/config\/locales\/.+\.yml/</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>


<p>With the asset pipeline, you no longer need gems like <code>guard-coffeescript</code> or <code>guard-compass</code>, unless you&#8217;re doing something really special.</p>

<h3>The <code>:test</code> group</h3>

<p>This one&#8217;s pretty standard: re-run RSpec with every change to the program code. Shouldn&#8217;t need much
explaining for this one.</p>

<h3>The <code>:js</code> group</h3>

<p>This one&#8217;s a lot like the RSpec setup: re-run Jasmine specs with every file change, configured to look in
the most typical place that asset pipeline JavaScript files live in: <code>vendor/assets/javascripts</code>. If you&#8217;re
also putting stuff into <code>lib/assets/javascripts</code> or <code>vendor/assets/javascripts</code> and want it to be part of
the trigger for re-running <code>jasmine-headless-webkit</code>, then change that first line to:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">watch</span><span class="p">(</span><span class="sr">%r{^(app|lib|vendor)/assets/javascripts/(.*)\.(js|coffee)}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">newest_js_file</span><span class="p">(</span><span class="n">spec_location</span> <span class="o">%</span> <span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
</code></pre>
</div>


<p>Note that this change <em>does not add these folders to your Rails Sprockets configuration nor to your
<code>jasmine-headless-webkit</code> configuration.</em> It only tells Guard to look in those places for file operations so
that it can execute code. <code>app</code>, <code>lib</code>, and <code>vendor</code> are automatically searched for by Rails, and they&#8217;re very
easy to add to <code>jasmine-headless-webkit</code>, which is what we&#8217;ll get to in the next part.</p>

<h3>The <code>:rails</code> group</h3>

<p>This one has a little more meat to it. First: a few notes about the Rails guard and Rails 3.1:</p>

<ul>
<li>There used to be a definition for <code>lib/.*\.rb</code>, but that was before I learned about <code>require_dependency</code>, which
flags &#8220;normal&#8221; Ruby files to be reloaded in development much like files in <code>app</code>. So if there&#8217;s some library file that, say, a model
depends on, include it in your model code like this and it gets reloaded along with the parent code:</li>
</ul>


<div class="highlight"><pre><code class="ruby"><span class="n">require_dependency</span> <span class="s1">&#39;super_cool&#39;</span>

<span class="k">class</span> <span class="nc">John</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">include</span> <span class="no">SuperCool</span>

  <span class="c1"># ...codes...</span>
<span class="k">end</span>
</code></pre>
</div>


<ul>
<li>Adding new locale files requires a restart of the server. That would be a good type of detection to add to <code>guard-rails</code>. If you
want to see it, and I don&#8217;t do it fast enough, go ahead and add it. I like pull requests.</li>
</ul>


<p>Second, LiveReload. It&#8217;s not entirely magic, but getting it set up &#8220;just right&#8221; can be a little tricky. There are three parts to
LiveReload:</p>

<ul>
<li>The LiveReload code, which has been moved to nice includable JavaScript in the latest version of LiveReload (before it was a browser extension).</li>
<li>The inclusion of the LiveReload code into <code>text/html</code> pages, and any extra code to get a WebSocket connection working.</li>
<li>A WebSocket server that accepts connections from browsers that are running the LiveReload code.</li>
</ul>


<p>With the asset pipeline, we want the following to happen:</p>

<ul>
<li>Reload only the appropriate stylesheet(s) when a Sass file is changed.</li>
<li>Reload everything if a Ruby or CoffeeScript file is changed. I&#8217;m not a fan of just reloading JavaScript, sorry.</li>
</ul>


<p>Most apps will only have the one &#8220;main&#8221; CSS file, <code>application.css</code>. Every other Sass and CSS file gets shoved into that file via the asset pipeline, especially
if you&#8217;re using Sass includes (which I do since they&#8217;re a lot more flexible than Sprockets ones). If you&#8217;re using Sprockets includes, enabling debug mode in
Sprockets, which you should have on in development anyway, I believe would allow you to reload specific stylesheets, but I&#8217;m more of a fan of Sass includes, so
there you go.</p>

<p>This Guard LiveReload setup&#8230;</p>

<div class="highlight"><pre><code class="ruby"><span class="n">guard</span> <span class="s1">&#39;livereload&#39;</span><span class="p">,</span> <span class="ss">:grace_period</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="k">do</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app\/.+\.(erb|haml|jst|hamljs|coffee)$}</span><span class="p">)</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app/assets/stylesheets/(.*)$}</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;assets/application.css&#39;</span> <span class="p">}</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">/app\/helpers\/.+\.rb/</span><span class="p">)</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">/config\/locales\/.+\.yml/</span><span class="p">)</span>
<span class="k">end</span>
</code></pre>
</div>


<p>&#8230;ensures that everything except changes to stylesheets reload the entire page. Stylesheet changes only reload the main CSS file. The <code>:grace_period</code>
ensures that Sprockets compilation catches up to the file save operations that Guard watches for before actually triggering the reload. It can
keep your browser from freaking out and reloading a ton of times on one save operation.</p>

<h2>Sprockets, Rails, and <code>jasmine-headless-webkit</code>, sitting in a tree&#8230;</h2>

<p>Sprockets is pretty cool, and it makes organizing JavaScript a lot easier. I also like super-fast unit testing, with Jasmine being my test framework of choice.
There&#8217;s three JavaScript unit testing-related problems with the typical Rails setup, though:</p>

<ul>
<li>Any <code>.erb</code> files that get data from your Rails app require you to have your app up and running to pull the data out. That&#8217;s integration testing
at that point, and I go into more detail about that on the <a href="http://johnbintz.github.com/jasmine-headless-webkit/"><code>jasmine-headless-webkit</code></a> site.</li>
<li>Your Sprockets config lives in <code>config/application.rb</code> (or even deeper into specific Rails environments).</li>
<li>Rails vendored JavaScript gems like <code>jquery-rails</code> let their presence be known with a Railtie.</li>
</ul>


<p>So <code>jasmine-headless-webkit</code> does the following, in order to make unit testing JavaScript code in a Rails/Sprockets application possible:</p>

<ul>
<li>It ignores <code>.erb</code> files unless your Sprockets requires are incorrect. You&#8217;ll know pretty quick if they are.</li>
<li>It requires that you add your asset paths to <code>jasmine.yml</code>.</li>
<li>All loaded gems are searched for <code>vendor/assets/javascripts</code> and any gems with that directory structure have that specific directory added to the Sprockets
asset path.</li>
</ul>


<p>All of this is covered on the <a href="http://johnbintz.github.com/jasmine-headless-webkit/"><code>jasmine-headless-webkit</code></a> site &#8211; this guide will get you up and running
without a ton of explanation.</p>

<h3>Set up Jasmine</h3>

<p>You can use <code>jasmine init</code> or <code>rails g jasmine:init</code>, but it&#8217;s a lot faster to just make <code>spec/javascripts/support/jasmine.yml</code> and add the following contents:</p>

<div class="highlight"><pre><code class="yaml"><span class="l-Scalar-Plain">src_dir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app/assets/javascripts</span>
<span class="l-Scalar-Plain">asset_paths</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">lib/assets/javascripts</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vendor/assets/javascripts</span>

<span class="l-Scalar-Plain">src_files</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="s">&quot;**/*&quot;</span>

<span class="l-Scalar-Plain">spec_dir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">spec/javascripts</span>

<span class="l-Scalar-Plain">spec_files</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="s">&quot;**/*[Ss]pec.*&quot;</span>

<span class="l-Scalar-Plain">helpers</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="s">&quot;helpers/**/*&quot;</span>
</code></pre>
</div>


<p>This adds <code>app/assets/javascripts</code>, <code>lib/assets/javascripts</code>, <code>vendor/assets/javascripts</code>, and <code>spec/javascripts</code> to the asset path, along with any other
available vendored JavaScript directories within gems.</p>

<p>If you added <code>jasmine-spec-extras</code> to your Gemfile, create <code>spec/javascripts/helpers/spec_helper.js.coffee</code> with:</p>

<div class="highlight"><pre><code class="coffeescript"><span class="c1">#= require jasmine-jquery</span>
<span class="c1">#= require sinon</span>
</code></pre>
</div>


<p>This adds <code>jasmine-jquery</code> and Sinon.js to your project, two must-haves when testing JS- and Ajax-heavy applications.</p>

<h3>Including JST templates</h3>

<p>Sprockets already comes with a bunch of supported templating engines, which are included just the same as in the Rails app:</p>

<div class="highlight"><pre><code class="coffeescript"><span class="c1">#= require backbone</span>
<span class="c1">#= require views/my_app/template.jst.eco</span>

<span class="k">class</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MyApp</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span>
  <span class="nv">template: </span><span class="nx">JST</span><span class="p">[</span><span class="s1">&#39;views/my_app/template&#39;</span><span class="p">]</span>
</code></pre>
</div>


<p><code>jasmine-headless-webkit</code> also watches out for <code>haml-sprockets</code> to be available, and if it is, it gets loaded and <code>.hamljs</code> templates become available:</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># Gemfile</span>

<span class="n">gem</span> <span class="s1">&#39;haml-sprockets&#39;</span>
</code></pre>
</div>




<div class="highlight"><pre><code class="coffeescript"><span class="c1"># app/assets/views/my_app.js.coffee</span>
<span class="c1">#</span>
<span class="c1">#= require views/my_app/template.jst.hamljs</span>
</code></pre>
</div>


<p><em>(want your templating engine added to JHW&#8217;s search? Open an issue or fork&#8217;n&#8217;fix!)</em></p>

<h3>Including Rails data into your JavaScript</h3>

<p>Short answer is, &#8220;you can&#8217;t.&#8221; <code>.erb</code> templates are outright ignored by <code>jasmine-headless-webkit</code>, since including that Rails data puts your
tests firmly in the integration test arena. If you have data coming in via an <code>.erb</code> file, like constants, you&#8217;ll have to stub those in your
test files:</p>

<div class="highlight"><pre><code class="coffeescript"><span class="c1"># app/assets/constants.js.coffee.erb</span>

<span class="nb">window</span><span class="p">.</span><span class="nv">Something = </span><span class="o">&lt;%=</span> <span class="nx">Rails</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">to_json</span> <span class="o">%&gt;</span>
</code></pre>
</div>




<div class="highlight"><pre><code class="coffeescript"><span class="c1"># spec/javascripts/helpers/constants.js.coffee</span>

<span class="nb">window</span><span class="p">.</span><span class="nv">Something =</span>
  <span class="nv">stub: </span><span class="s2">&quot;data&quot;</span>
</code></pre>
</div>


<p>Remember that, in Jasmine&#8217;s loading scheme, helpers are always loaded before your specs, but after your code-under-test.</p>

<h3>Annoying JavaScript</h3>

<p>Unfortunately, out in the world there are still a lot of projects and code snippets that are just annoying to plug into the
asset pipeline. Things like WYSIWYG code editors, uploading tools, and lots of other projects that, while they work and can work very well,
often do bad things to make themselves work. They may not play well with <code>jasmine-headless-webkit</code>, so I stick these <em>annoying JavaScript</em> projects
into a <code>vendor-annoying/assets/javascripts</code> folder and only add that asset path to Rails&#8217;s config. Then, if I need to use those
JavaScript files, I either reference those files in an <code>.erb</code> file or just flat-out require those files using <code>javascript_include_tag</code>,
to get them into the app while not getting them into JHW.</p>

<h2>LiveReload&#8217;n</h2>

<p>(modern versions of) LiveReload works by loading up a JavaScript file into browsers smart enough to know WebSockets, having the
browser connect to a running LiveReload WS server, and waiting for notifications from the WS server instructing the browser to
reload certain things, like just the CSS, just the JavaScript, or to reload the whole page.</p>

<p><code>rack-livereload</code> is the easiest way to plug in LiveReload to the development environment of a running Rails app, and it has the
additional advantage of bringing along a copy of <code>web-socket-js</code>, a WebSocket simulator for browsers that support Flash. So you
can LiveReload away in non-bleeding edge browsers and on pretty much any mobile device, all at the same time.</p>

<p>With <code>rack-livereload</code> in your Gemfile under <code>:development</code>, add the middleware to <code>config/initializers/development.rb</code>:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">insert_before</span><span class="p">(</span><span class="no">Rack</span><span class="o">::</span><span class="no">Lock</span><span class="p">,</span> <span class="no">Rack</span><span class="o">::</span><span class="no">LiveReload</span><span class="p">)</span>
</code></pre>
</div>


<p>Boot up your app, load a page in your favorite browser, and make sure you get the following:</p>

<ul>
<li>The LiveReload script injected into the source code of your page.</li>
<li>Notifications in your console of LiveReload trying to connect to a server (or actually connecting if <code>guard-livereload</code> is running).</li>
</ul>


<p>Now, get <code>guard-livereload</code> running and change a file that it watches for. If everything is connected and working, the act of saving that
file should reload any browsers attached to the LiveReload server.</p>

<p>If it doesn&#8217;t reload, yet <code>guard-livereload</code> says it&#8217;s reloading something, try the following:</p>

<ul>
<li>Force-reload the browser manually to reconnect to the LiveReload server.</li>
<li>Make sure the filenames getting passed to <code>guard-livereload</code> make sense. If you&#8217;re trying to reload a specific file like a stylesheet,
try removing the specific file check and make sure that whole page reloading works first.</li>
<li>Restart the whole Guard. The combination of <code>guard-livereload</code> and <code>rack-livereload</code> don&#8217;t like it when you just refresh the <code>Guardfile</code>.
At least, that&#8217;s been my experience.</li>
</ul>


<h2>Production servers don&#8217;t need JavaScript runtimes</h2>

<p>Back in the Barista/Jammit days, I always precompiled all my JavaScript code, since that was what you did. Also, the servers on which I was
running some of my code were too old for building a JavaScript runtime like Node.js or <code>therubyracer</code>. While I&#8217;ve moved to Rails 3.1 and
away from Barista and Jammit, those servers are still too old for a JS runtime. But I&#8217;m actually of the mindset that production servers
don&#8217;t really need that runtime, since you can precompile everything locally and push it up using Capistrano, or (my favorite) just re-adding all
those compiled assets to your Git repository on commit.</p>

<p>There are definitely disadvantages to this approach:</p>

<ul>
<li>If your <code>.erb</code> code requires access to, say, the data on the remote production system, this definitely won&#8217;t work. I may ask why your
generated JavaScript is tied so tightly to your database, but that&#8217;s for another time.</li>
<li>It can make Git commits kinda big and noisy, especially if a lot of JavaScript is being changed. Typically I find that it&#8217;s just
whatever files I&#8217;ve changed, along with the final compiled files and their <code>.gz</code> counterparts.</li>
<li>Unless you&#8217;re using a Git hook to do the compilation, you&#8217;re going to forget to do it.</li>
</ul>


<p>But there&#8217;s one really nice advantage:</p>

<ul>
<li>My stupid little continuous deployment setup is super-fast, since all I have to do is the equivalent of <code>bundle exec cap latest deploy</code> on
the Git server and away I go. No JS dependencies anywhere but my development machine.</li>
</ul>


<p>So it&#8217;s up to you how you want to do it. I&#8217;m just giving you the way that I prefer to put my assets together for production, staging, or
continuous deployment.</p>

<p>I use Git hooks like crazy. My <code>penchant</code> project use them to enforce test running before commit, and with that same approach, you can
generate your assets destined for whichever environment you choose. <code>penchant</code> runs <code>bundle exec rake</code> and expects an exit code of 0.
This means you can stack on some asset compilation code to your <code>Rakefile</code>&#8217;s default task, along with your test running (since you&#8217;re only
running this task on Git commit, and your actual &#8220;testing&#8221; is done using Guard):</p>

<div class="highlight"><pre><code class="ruby"><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="ss">:spec</span><span class="p">,</span> <span class="s1">&#39;jasmine:headless&#39;</span><span class="p">,</span> <span class="ss">:build_and_add_assets</span> <span class="o">]</span>

<span class="n">task</span> <span class="ss">:build_and_add_assets</span> <span class="k">do</span>
  <span class="nb">system</span> <span class="sx">%{bundle exec RAILS_ENV=production assets:precompile}</span>
  <span class="nb">system</span> <span class="sx">%{git add public/assets}</span>
<span class="k">end</span>
</code></pre>
</div>


<p>When you have the Git hook <code>.git/hooks/pre-commit</code> running <code>bundle exec rake</code>, you&#8217;ll always be guaranteed to not only have correct code,
but also to have compiled assets.</p>

<h3>Annoying JavaScript, part 2</h3>

<p>Just because you don&#8217;t have a JavaScript runtime on the remote server doesn&#8217;t mean you should turn off the asset pipeline on production.
You could have more <em>annoying JavaScript</em> that you need to access. What you want to do is be careful not to include any CoffeeScript files
(and if it&#8217;s an annoying JS project, trust me, they don&#8217;t have any). and keep the pipeline on. Oh, and disable the JS compressor.
The stuff you care about compressing is already compressed from the operation above.</p>

<h2>End of guide.</h2>

<p>Now get to coding super-fast using Rails 3.1, asset pipelines, and other fun things!</p>

<h2>History</h2>

<ul>
<li>0.9001: Hi, Scott.</li>
<li>0.9002: Scott uses ADD FEATURE TO <code>jasmine-headless-webkit</code>. It&#8217;s super effective!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating mail from an older Citadel server to a new one]]></title>
    <link href="http://johnbintz.github.com/blog/2011/12/05/migrating-mail-from-old-citadel-server/"/>
    <updated>2011-12-05T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2011/12/05/migrating-mail-from-old-citadel-server</id>
    <content type="html"><![CDATA[<p>I have an old Citadel server that I want to move mail from, the destination being a new Citadel server. The old server is older than the new
over-the-wire or XML support, so I&#8217;m doing it the hard way and copying messages from one to another over the network. I found
<a href="http://www.athensfbc.com/imap_tools/">imapcopy.pl</a> which is getting the job done nicely. Everything else will have to come over manually,
which will actualy be faster thatn trying to upgrade anything. :/</p>

<p>A few observations:</p>

<ul>
<li>Clean out big mailboxes. My Sent Items folder had a ton of cruft that could be removed, and it made the process go a lot faster <em>(no wai)</em>.</li>
<li>Turn on IMAP protocol watching, otherwise you won&#8217;t know if something&#8217;s actually broke or not.</li>
</ul>

]]></content>
  </entry>
  
</feed>
