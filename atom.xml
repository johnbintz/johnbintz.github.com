<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My webzone]]></title>
  <link href="http://johnbintz.github.com/atom.xml" rel="self"/>
  <link href="http://johnbintz.github.com/"/>
  <updated>2012-04-18T12:21:25-04:00</updated>
  <id>http://johnbintz.github.com/</id>
  <author>
    <name><![CDATA[John Bintz]]></name>
    <email><![CDATA[john@coswellproductions.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Autogenerate Cucumber steps, John-style]]></title>
    <link href="http://johnbintz.github.com/blog/2012/04/18/autogenerate-cucumber-steps-john-style/"/>
    <updated>2012-04-18T00:00:00-04:00</updated>
    <id>http://johnbintz.github.com/blog/2012/04/18/autogenerate-cucumber-steps-john-style</id>
    <content type="html"><![CDATA[<p>Following up on an <a href="http://johnbintz.github.com/blog/2012/01/03/cucumber-step-definitions-in-separate-files/">experiment I started earlier this year</a>,
I created a Cucumber formatter that will write out undefined steps to a directory you specify. So much less copypaste for
my workflow.</p>

<p>Stay tuned to the gist for updates. I may even roll a similar functionality into <a href="http://johnbintz.github.com/flowerbox/">Flowerbox</a>.</p>

<div><script src='https://gist.github.com/2414336.js?file='></script>
<noscript><pre><code># this writes out undefined step definitions, one per file, in the usual way that i do cucumber stuff.
# it saves a *lot* of copypaste from the terminal. still in progress as i refine the process.

# use it as a formatter: cucumber -f PrettyStepWriter
# save it to support/env/pretty_step_writer.rb

module StepWriter
  class &lt;&lt; self
    def target=(dir)
      @target = Pathname(dir)
    end

    def target
      @target
    end

    def after_write(&amp;block)
      if block
        @after_write = block
      else
        @after_write
      end
    end
  end

  def print_snippets(options)
    undefined = step_mother.steps(:undefined)
    return if undefined.empty?

    undefined.each do |step|
      step_name = Cucumber::Undefined === step.exception ? step.exception.step_name : step.name
      step_multiline_class = step.multiline_arg ? step.multiline_arg.class : nil

      path = StepWriter.target.join(step.actual_keyword.downcase.strip, step_name.underscore.gsub(%r{[^\w]+}, '_') + '.rb')

      @io.puts &quot;Writing new step to #{path}&quot;

      path.parent.mkpath
      path.open('wb') { |fh| fh.print @step_mother.snippet_text(step.actual_keyword, step_name, step_multiline_class) }
    end

    StepWriter.after_write.call if StepWriter.after_write
  end
end

# make other formatters behave this way by subclassing, then including StepWriter

class PrettyStepWriter &lt; Cucumber::Formatter::Pretty
  include StepWriter
end

StepWriter.target = &quot;features/step_definitions&quot;

# after creating new steps, open the step definitions folder so you can rearrange the steps
# i typically have subdirectories for each &quot;area&quot; that i'm testing. it's fluid, i don't have a really rigid structure for
# how i organize those. it's still better than monolithic *_steps.rb files (imho).

StepWriter.after_write do
  system %{open #{StepWriter.target}}
end
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railtie that adds to load paths]]></title>
    <link href="http://johnbintz.github.com/blog/2012/03/28/railtie-that-adds-to-load-path/"/>
    <updated>2012-03-28T00:00:00-04:00</updated>
    <id>http://johnbintz.github.com/blog/2012/03/28/railtie-that-adds-to-load-path</id>
    <content type="html"><![CDATA[<p>Have to add paths via a Railtie (not an Engine)? Use <code>config.before_configuration</code>:</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">MyCoolGem</span>
  <span class="k">class</span> <span class="nc">Railtie</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Railtie</span>
    <span class="n">config</span><span class="o">.</span><span class="n">before_configuration</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
      <span class="n">app</span><span class="o">.</span><span class="n">paths</span><span class="o">[</span><span class="s1">&#39;app/helpers&#39;</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../../app/helpers&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
      <span class="n">app</span><span class="o">.</span><span class="n">paths</span><span class="o">[</span><span class="s1">&#39;app/views&#39;</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../../app/views&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyNation notes from talks I went to]]></title>
    <link href="http://johnbintz.github.com/blog/2012/03/23/rubynation-notes/"/>
    <updated>2012-03-23T00:00:00-04:00</updated>
    <id>http://johnbintz.github.com/blog/2012/03/23/rubynation-notes</id>
    <content type="html"><![CDATA[<h2>JRuby and threading</h2>

<div class="highlight"><pre><code class="ruby"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">concurrent</span>

<span class="n">service</span> <span class="o">=</span> <span class="no">Executors</span><span class="o">.</span><span class="n">new_fixed_thread_pool</span>
<span class="n">service</span><span class="o">.</span><span class="n">execute</span> <span class="p">{</span> <span class="n">codes</span> <span class="p">}</span>

<span class="n">service</span><span class="o">.</span><span class="n">shutdown</span>
<span class="n">service</span><span class="o">.</span><span class="n">await_termination</span>
<span class="n">service</span><span class="o">.</span><span class="n">shutdown_now</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment: ActiveResource collection classes]]></title>
    <link href="http://johnbintz.github.com/blog/2012/03/12/experiment-active-record-resource-collections/"/>
    <updated>2012-03-12T00:00:00-04:00</updated>
    <id>http://johnbintz.github.com/blog/2012/03/12/experiment-active-record-resource-collections</id>
    <content type="html"><![CDATA[<p>Stealing an idea from <a href="http://backbonejs.org/">Backbone.js</a>, I decided to try using a collection
class with an ActiveResource model I was working on. The use case was for creating a tree of objects
based on an <code>acts_as_tree</code> storage method, where child objects have a <code>parent_id</code> set the same as the
parent&#8217;s <code>id</code>. Here&#8217;s what I originally had:</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Category</span> <span class="o">&lt;</span> <span class="no">ActiveResource</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">tree</span>
    <span class="vi">@all</span> <span class="o">=</span> <span class="n">all</span>
    <span class="vi">@all</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span> <span class="o">=</span> <span class="o">[]</span> <span class="p">}</span>

    <span class="n">top_nodes</span> <span class="o">=</span> <span class="vi">@all</span><span class="o">.</span><span class="n">find_all</span> <span class="p">{</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span> <span class="n">category</span><span class="o">.</span><span class="n">parent_id</span> <span class="o">==</span> <span class="kp">nil</span> <span class="p">}</span><span class="o">.</span><span class="n">sort</span>
    <span class="n">top_nodes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
      <span class="n">node</span><span class="o">.</span><span class="n">children</span> <span class="o">=</span> <span class="vi">@all</span><span class="o">.</span><span class="n">find_all</span> <span class="p">{</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span> <span class="n">category</span><span class="o">.</span><span class="n">parent_id</span> <span class="o">==</span> <span class="n">node</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span><span class="o">.</span><span class="n">sort</span>
    <span class="k">end</span>
    <span class="n">top_nodes</span><span class="o">.</span><span class="n">sort</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>


<p>Big, long, hard-to-cleanly-test method. Ick. Did this instead:</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># simple skeleton to hang more on later</span>
<span class="k">class</span> <span class="nc">ActiveResource</span><span class="o">::</span><span class="no">Collection</span> <span class="o">&lt;</span> <span class="o">::</span><span class="nb">Array</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">models</span><span class="p">)</span>
    <span class="n">replace</span><span class="p">(</span><span class="n">models</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Category</span> <span class="o">&lt;</span> <span class="no">ActiveResource</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">tree</span>
    <span class="no">Categories</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">all</span><span class="p">)</span><span class="o">.</span><span class="n">tree</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">top_node?</span>
    <span class="n">parent_id</span> <span class="o">==</span> <span class="kp">nil</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Categories</span> <span class="o">&lt;</span> <span class="no">ActiveResource</span><span class="o">::</span><span class="no">Collection</span>
  <span class="k">def</span> <span class="nf">top_nodes</span>
    <span class="n">find_all</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:top_node?</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">tree</span>
    <span class="n">top_nodes</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
      <span class="n">node</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">children</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">find_all</span> <span class="p">{</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span> <span class="n">model</span><span class="o">.</span><span class="n">parent_id</span> <span class="o">==</span> <span class="n">node</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span><span class="o">.</span><span class="n">sort</span> <span class="p">}</span>
    <span class="k">end</span><span class="o">.</span><span class="n">sort</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>


<p>More lines of code, but no mess in the model itself. I&#8217;ll play with the idea and see how well it scales to other situations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[That sense of tmux cameraderie]]></title>
    <link href="http://johnbintz.github.com/blog/2012/03/06/that-sense-of-tmux-cameraderie/"/>
    <updated>2012-03-06T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/03/06/that-sense-of-tmux-cameraderie</id>
    <content type="html"><![CDATA[<p>I&#8217;ve switched to <a href="http://tmux.sf.net/"><code>tmux</code></a> and wanted to simplify my life as best as I can when using it, so I tried a few tmux gems to manage configs
and decided on <a href="http://github.com/remiprev/teamocil"><code>teamocil</code></a>. However, like anything involving
a terminal multiplexer, it needs massaging <em>(Teamocil may cause numbness of the extremities.)</em>:</p>

<div class="highlight"><pre><code class="bash"><span class="c"># ~/.bash_profile</span>

tmc<span class="o">()</span> <span class="o">{</span>
  tmux has -t <span class="nv">$1</span> <span class="o">&amp;&amp;</span> tmux attach -t <span class="nv">$1</span> <span class="o">||</span> tmux new -s <span class="nv">$1</span> <span class="s2">&quot;teamocil $1&quot;</span>
<span class="o">}</span>

<span class="k">function </span>_tmc<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">IFS</span><span class="o">=</span><span class="s1">$&#39;\n&#39;</span>
  <span class="nb">local </span><span class="nv">cur</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
  <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">&quot;$(find ~/.teamocil -type f | sed &#39;s#^.*/\(.*\)\.yml$#\1#&#39; )&quot;</span> -- <span class="s2">&quot;${cur}&quot;</span><span class="k">)</span><span class="o">)</span>
<span class="o">}</span>

<span class="nb">complete</span> -F _tmc tmc
</code></pre>
</div>




<div class="highlight"><pre><code class="ini"><span class="c"># ~/.tmux.conf</span>

<span class="err">set</span> <span class="err">-g</span> <span class="err">base-index</span> <span class="err">0</span>
</code></pre>
</div>


<p>Then, don&#8217;t use the <code>session</code> key in your configs:</p>

<div class="highlight"><pre><code class="yaml"><span class="c1"># ~/.teamocil/johnbintz-gh.yml</span>

<span class="l-Scalar-Plain">windows</span><span class="p-Indicator">:</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vim</span>
    <span class="l-Scalar-Plain">root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">~/Projects/johnbintz-gh</span>
    <span class="l-Scalar-Plain">splits</span><span class="p-Indicator">:</span>
      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vim</span>
        <span class="l-Scalar-Plain">height</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">90</span>
      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">be rake preview</span>
        <span class="l-Scalar-Plain">height</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10</span>
</code></pre>
</div>


<p>And finally, <code>tmc johnbintz-gh</code> will start or rejoin an exisiting Teamocil-configured session.</p>

<p>I could&#8217;ve sworn my terminal management just got easier. Or not. I think hallucination is one of the side effects of Teamocil. <em>(It isn&#8217;t.)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber and Solarized Dark]]></title>
    <link href="http://johnbintz.github.com/blog/2012/03/06/cucumber-and-solarized-dark/"/>
    <updated>2012-03-06T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/03/06/cucumber-and-solarized-dark</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/altercation/solarized/tree/master/iterm2-colors-solarized">Solarized Dark</a> for iTerm2 is weird in that the grey used by Cucumber to show where
a snippet comes from is nearly invisible. You can either increase the contrast (I set it to about 20%), or export a <code>CUCUMBER_COLORS</code> environment variable so
you don&#8217;t have to worry about it:</p>

<pre><code>export CUCUMBER_COLORS=comment=cyan
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closing the given body in Rack middleware]]></title>
    <link href="http://johnbintz.github.com/blog/2012/03/05/closing-given-body-in-rack-middleware/"/>
    <updated>2012-03-05T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/03/05/closing-given-body-in-rack-middleware</id>
    <content type="html"><![CDATA[<p>Here&#8217;s one that was biting my bum: <a href="https://github.com/johnbintz/rack-livereload/"><code>rack-livereload</code></a> started generating a bunch
of thread deadlock errors left and right for users. One commenter on the bug thread mentioned that middleware need to close the
body, which I had never heard of before. Turns out it&#8217;s not as well-documented a practice that I would have hoped.</p>

<p>It boils down to trying to close the <code>body</code> that you get after you <code>call</code> your app, in case for some reason it passes you an
open file handle (which I guess is a thing?)</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">MyMiddleware</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="nb">dup</span><span class="o">.</span><span class="n">_call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="c1"># &lt;= the thing I thought would fix the deadlocks</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">_call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="o">[</span> <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">]</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>

    <span class="n">new_body</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="n">body</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">new_body</span> <span class="o">&lt;&lt;</span> <span class="n">line</span> <span class="p">}</span>
    <span class="n">body</span><span class="o">.</span><span class="n">close</span> <span class="k">if</span> <span class="n">body</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:close</span><span class="p">)</span> <span class="c1"># &lt;= the thing I really had to do</span>

    <span class="c1"># ...process stuff...</span>

    <span class="o">[</span> <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">new_body</span> <span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>


<p>So this is mainly so I remember to do this from now on, and for anyone else who runs into thread deadlock issues with Rack middleware.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dawn Dancing]]></title>
    <link href="http://johnbintz.github.com/blog/2012/02/27/dawn-dancing/"/>
    <updated>2012-02-27T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/02/27/dawn-dancing</id>
    <content type="html"><![CDATA[<p><img src="http://johnbintz.github.com/assets/sketchbook-comics/dawn-dancing.jpg"><br /></p>

<p>Done in Sketchbook on Android.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM, the JSON gem, the @global gemset, and rb_gc bugs]]></title>
    <link href="http://johnbintz.github.com/blog/2012/02/16/rvm-default-gemset-json-gem/"/>
    <updated>2012-02-16T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/02/16/rvm-default-gemset-json-gem</id>
    <content type="html"><![CDATA[<p>Upon building Ruby 1.9.3-p125 on my Snow Leopard Mac and getting ready to take it for a spin, trying to run anything of note in a Rails app brought the following cryptic error:</p>

<pre><code>[BUG] cross-thread violation on rb_gc()
(null)

Abort trap
</code></pre>

<p>Digging into Console.app, the backtrace indicated that the system <code>libruby.1.dylib</code> was being accessed from the C parser in the <code>json</code> gem living in the <code>@global</code>
RVM gemset. <code>otool -L</code> confirmed that the parser in the <code>@global</code> gemset was linked against system ruby, not RVM ruby. Installing a new <code>json</code> gem into the current gemset didn&#8217;t work, as RVM prefers to use the <code>@global</code> version of the gem over the one in the current gemset,
it seems. Deleting the gems from the <code>@global</code> gemset and reinstalling the <code>json</code> gem in the current gemset worked, and I&#8217;m sure I could have reinstalled the
<code>json</code> gem globally too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependent APIs and expires_in in Cucumber]]></title>
    <link href="http://johnbintz.github.com/blog/2012/02/06/expires_in-and-dependent-apis-in-cucumber/"/>
    <updated>2012-02-06T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/02/06/expires_in-and-dependent-apis-in-cucumber</id>
    <content type="html"><![CDATA[<p>The setup:</p>

<ul>
<li>Cucumber</li>
<li>Capybara</li>
<li><code>capybara-webkit</code></li>
<li>A running Rails API (started up using <a href="http://github.com/johnbintz/vegetable_glue/">vegetable_glue</a>)</li>
<li>Active Resource for moving objects around</li>
</ul>


<p>The problem:</p>

<p>A particular dependent API request wasn&#8217;t making it back to the app under test nor the browser. The
request was actually being proxied through the app, pretty much raw from the API and not re-run
through Active Resource before being sent to the browser.</p>

<p>The issue:</p>

<p>An <code>expires_in</code> in the controller method was sending along cache information, causing the stale data to
be cached <em>somewhere</em>.</p>

<p>The solution:</p>

<p>In <code>config/environments/cucumber.rb</code> on the API:</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">ActionController::ConditionalGet</span>
  <span class="k">def</span> <span class="nf">expires_in</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>


<p>Punch them ducks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The cleanest Bundler env]]></title>
    <link href="http://johnbintz.github.com/blog/2012/02/02/the-cleanest-bundler-env/"/>
    <updated>2012-02-02T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/02/02/the-cleanest-bundler-env</id>
    <content type="html"><![CDATA[<p>Running commands in a Bundler-enabled app that has a Git repo attached to it makes running Bundler in subshells a pain.
<code>Bundler.with_clean_env</code> gets close, but still leaves enough of Bundler around to be unpleasant. This kills it dead
in subshells:</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">Bundler</span>
  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
    <span class="k">def</span> <span class="nf">with_sparkling_clean_env</span>
      <span class="n">oenv</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">.</span><span class="n">to_hash</span>

      <span class="sx">%w{BUNDLE_GEMFILE RUBYOPT GEM_HOME GIT_DIR GIT_WORK_TREE}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="no">ENV</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">}</span>

      <span class="k">yield</span>

      <span class="no">ENV</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">oenv</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[falcon patch adventures for ruby 1.9.3]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/31/falcon-patch-adventures-for-ruby-1.9.3/"/>
    <updated>2012-01-31T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/31/falcon-patch-adventures-for-ruby-1.9.3</id>
    <content type="html"><![CDATA[<p>OK, I got the super-cool <a href="https://gist.github.com/1688857">falcon patch</a> (as it&#8217;s known in rvm) working on my Snow Leopard Macs, but had a few
issues with it, and not because of the patch itself:</p>

<ul>
<li>For some reason, building any 1.9.3 in rvm on my machines screws up the Makefile and sticks in a circular reference to
building the ruby executable (as in, dependency ruby => ruby). Have to always rip out that last line in the Makefile
and <code>make ; make install</code>.</li>
<li>As rvm so succinctly warned me (I had no idea <code>rvm requirements</code> existed!), GCC &amp; associated bits in the default Snow
Leopard XCode release are broken. I was getting segfaults on garbage collection within the cached load path part of
the patch, which is where the real speed came from. I installed <a href="https://github.com/kennethreitz/osx-gcc-installer">osx-gcc-installer</a>
and removed the rest of XCode, then recompiled and everything worked fine.</li>
</ul>


<p>How much of an improvement for me? 3 RSpec runs of a big app went from 2:40.742s (1.9.2-p290 with load patch) to 1:48.104s (1.9.3-p0 with falcon patch).
A 33% speed increase. Sweet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Under SOPA, this site is now liable for damages]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/18/under-sopa-this-site-is-now-liable/"/>
    <updated>2012-01-18T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/18/under-sopa-this-site-is-now-liable</id>
    <content type="html"><![CDATA[<p><a href="http://www.youtube.com/">YouTube</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript in my jQuery: Objects as data containers]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/15/javascript-in-my-jquery-objects-as-data-containers/"/>
    <updated>2012-01-15T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/15/javascript-in-my-jquery-objects-as-data-containers</id>
    <content type="html"><![CDATA[<p>Sometimes you have to pass in options to jQuery functions like this:</p>

<div class="highlight"><pre><code class="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
  <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;300px&#39;</span><span class="p">,</span>
  <span class="nx">opacity</span><span class="o">:</span> <span class="mf">0.75</span><span class="p">,</span>
<span class="p">});</span>
</code></pre>
</div>


<p>This:</p>

<div class="highlight"><pre><code class="js"><span class="p">{</span>
  <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;300px&#39;</span><span class="p">,</span>
  <span class="nx">opacity</span><span class="o">:</span> <span class="mf">0.75</span>
<span class="p">}</span>
</code></pre>
</div>


<p>is the most basic form of an <em>Object</em>. Objects have two things: <em>properties</em>
and <em>methods</em>. When you attach other things to an object, like the String <code>300px</code>
or the Number <code>0.75</code>, you&#8217;re creating properties.</p>

<p><em>Methods</em> are Functions attached to an object. When you extend <code>jQuery.fn</code> with your
own jQuery actions, you&#8217;re creating a new method:</p>

<div class="highlight"><pre><code class="js"><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">makeAllTranslucent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
    <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;300px&#39;</span><span class="p">,</span>
    <span class="nx">opacity</span><span class="o">:</span> <span class="mf">0.75</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// now you have a shortcut!</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">makeAllTranslucent</span><span class="p">();</span>
</code></pre>
</div>


<p>You can add and change properties on an object after-the-fact, too:</p>

<div class="highlight"><pre><code class="js"><span class="kd">var</span> <span class="nx">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">height</span><span class="o">:</span> <span class="s2">&quot;300px&quot;</span> <span class="p">};</span>
<span class="k">if</span> <span class="nx">confirm</span><span class="p">(</span><span class="s2">&quot;Want them translucent?&quot;</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">properties</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">=</span> <span class="mf">0.75</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// pass the object in as the first parameter</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">(</span><span class="nx">properties</span><span class="p">);</span>
</code></pre>
</div>


<p>Because of the way JavaScript is designed, everything is an object: the
one you created with <code>{curly: 'brackets'}</code>, <code>$.fn</code>, standalone Functions,
everything. This lets developers do some very clever things with JavaScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript in my jQuery: the magic $(this)]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/14/javascript-in-my-jquery-the-magic-this/"/>
    <updated>2012-01-14T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/14/javascript-in-my-jquery-the-magic-this</id>
    <content type="html"><![CDATA[<p>Say you&#8217;re looping over some elements on the page:</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;div&gt;</span>One<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>Two<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>Three<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;unvisited&#39;</span><span class="p">);</span>
<span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre>
</div>


<p>Within the <em>anonymous function</em>:</p>

<div class="highlight"><pre><code class="js"><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;unvisited&#39;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
</div>


<p><code>this</code> becomes each jQuery object found in <code>$('div')</code> in turn. But how?</p>

<p>That <code>this</code> normally means <em>the object running the current code</em>:</p>

<div class="highlight"><pre><code class="javascript"><span class="c1">// create a class constructor</span>
<span class="kd">function</span> <span class="nx">Cat</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// add a method to the object</span>
<span class="nx">Cat</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hiss</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is hissing at you!&quot;</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// instantiate a Cat</span>
<span class="kd">var</span> <span class="nx">myCat</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cat</span><span class="p">(</span><span class="s2">&quot;Fluffy&quot;</span><span class="p">);</span>

<span class="c1">// work with our cat</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myCat</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// =&gt; Fluffy</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myCat</span><span class="p">.</span><span class="nx">hiss</span><span class="p">());</span> <span class="c1">// =&gt; Fluffy is hissing at you!</span>
</code></pre>
</div>


<p>But JavaScript lets you change <code>this</code> to whatever object you want using <code>Function#apply</code>:</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s2">&quot;Bruiser&quot;</span><span class="p">);</span>

<span class="c1">// Cat.prototype.hiss is an object of type Function</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Cat</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hiss</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">dog</span><span class="p">));</span> <span class="c1">// =&gt; Bruiser is hissing at you!</span>
</code></pre>
</div>


<p>jQuery does this with the <code>jQuery.fn#each</code> method when looping over things like DOM elements. <code>this</code>
becomes a jQuery object for each DOM node in turn:</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// the first run through, `this` is $(&#39;div:eq(0)&#39;)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:eq(0)&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span> <span class="c1">// =&gt; &#39;&#39;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:eq(1)&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span> <span class="c1">// =&gt; &#39;&#39;</span>

  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;uninvited&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:eq(0)&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span> <span class="c1">// =&gt; &#39;uninvited&#39;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:eq(1)&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span> <span class="c1">// =&gt; &#39;&#39;</span>
<span class="p">});</span>
</code></pre>
</div>


<p>For polyglots: This is very similar in concept to how <code>instance_eval</code> can be used in Ruby:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">code</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">puts</span> <span class="vi">@name</span> <span class="p">}</span>

<span class="k">class</span> <span class="nc">Dog</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">;</span> <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span> <span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>

<span class="n">my_dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Bruiser&quot;</span><span class="p">)</span>

<span class="n">my_dog</span><span class="o">.</span><span class="n">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">code</span><span class="p">)</span> <span class="c1">#=&gt; &quot;Bruiser&quot;</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript in my jQuery: $(document).ready()]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/13/javascript-in-my-jquery-document-ready/"/>
    <updated>2012-01-13T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/13/javascript-in-my-jquery-document-ready</id>
    <content type="html"><![CDATA[<p>In jQuery, you normally write code like this to do something after the whole page loads:</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  <span class="c1">// the long way...</span>
  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#login-box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;slow&#39;</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="c1">// the short way...</span>
  <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#login-box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;slow&#39;</span><span class="p">);</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre>
</div>


<p>There&#8217;s two things going on here:</p>

<ul>
<li>You&#8217;re attaching an <em>event handler</em> to a thing that <em>fires</em> an event. Specifically, the event that fires when
all the parts of your Web page have finished loading and that the <em>document</em> is <em>ready</em>.</li>
<li>That event handler:</li>
</ul>


<div class="highlight"><pre><code class="javascript">  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#login-box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;slow&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  
</code></pre>
</div>


<p>  is what&#8217;s known as an <em>anonymous function</em>. Normally functions get names:</p>

<div class="highlight"><pre><code class="javascript">  <span class="kd">function</span> <span class="nx">doSomething</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#login-box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;slow&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  
</code></pre>
</div>


<p>  But, you can also create a function that doesn&#8217;t have a name&#8230;it&#8217;s <em>anonymous</em>. You use these a lot in jQuery.
  They come in pretty handy and have a lot of interesting properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber, Capybara, and Rails Asset Pipeline in debug mode]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/07/cucumber-capybara-asset-pipeline-debug-mode/"/>
    <updated>2012-01-07T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/07/cucumber-capybara-asset-pipeline-debug-mode</id>
    <content type="html"><![CDATA[<p>Because who wants to recompile all their assets on each run?</p>

<h2>features/support/env.rb</h2>

<div class="highlight"><pre><code class="ruby"><span class="no">Capybara</span><span class="o">.</span><span class="n">server_port</span> <span class="o">=</span> <span class="mi">3001</span>
<span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:3001&quot;</span>

<span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span>
</code></pre>
</div>


<h2>config/environments/cucumber.rb</h2>

<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span>
<span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre>
</div>


<p>You&#8217;re welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Years Resolution #1]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/04/new-years-resolution-one/"/>
    <updated>2012-01-04T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/04/new-years-resolution-one</id>
    <content type="html"><![CDATA[<p>Pay off the technical debt, especially in my test suites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment: Cucumber step definitions in separate files]]></title>
    <link href="http://johnbintz.github.com/blog/2012/01/03/cucumber-step-definitions-in-separate-files/"/>
    <updated>2012-01-03T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2012/01/03/cucumber-step-definitions-in-separate-files</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been getting back into using <a href="http://cukes.info/">Cucumber</a> for integration/acceptance testing,
but I didn&#8217;t want to repeat one of the mistakes I made in the past: bloated step definition files.
There were often step definitions I wanted to use globally for things like making files and such, and
I didn&#8217;t want to have <code>massive_file_steps.rb</code> with 100 step definitions anymore.</p>

<p>So instead of having a setup like this:</p>

<pre><code>features/
  step_definitions/
    foo_steps.rb
    bar_steps.rb
  foo.feature
  bar.feature
</code></pre>

<p>With <code>foo_steps.rb</code> containing code like this:</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Given</span><span class="sr"> /^I have a cat$/</span> <span class="k">do</span>
  <span class="vi">@cat</span> <span class="o">=</span> <span class="no">Cat</span><span class="o">.</span><span class="n">new</span>
<span class="k">end</span>

<span class="no">When</span><span class="sr"> /^I pet the cat$/</span> <span class="k">do</span>
  <span class="vi">@result</span> <span class="o">=</span> <span class="vi">@cat</span><span class="o">.</span><span class="n">pet</span>
<span class="k">end</span>

<span class="no">Then</span><span class="sr"> /^the cat should not have hissed$/</span> <span class="k">do</span>
  <span class="vi">@cat</span><span class="o">.</span><span class="n">should_not</span> <span class="n">have_hissed</span>
<span class="k">end</span>
</code></pre>
</div>


<p>I am now trying this:</p>

<pre><code>features/
  step_definitions/
    given/
      i_have_a_cat.rb
    when/
      i_pet_the_cat.rb
    then/
      cat_should_not_have_hissed.rb
  foo.feature
  bar.feature
</code></pre>

<p>It seems to be working so far, but we&#8217;ll see how it scales.</p>

<p><em>Update 2012-04-18</em>: It scales quite well, thank you very much. I have a <a href="http://johnbintz.github.com/blog/2012/04/18/autogenerate-cucumber-steps-john-style/">Cucumber formatter</a>
that does exactly this now. Should make most of the Cucumber feature bootstrapping process pretty seamless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SketchBook Comics - "Bad At Comebacks"]]></title>
    <link href="http://johnbintz.github.com/blog/2011/12/31/sketchbook-comic-bad-at-comebacks/"/>
    <updated>2011-12-31T00:00:00-05:00</updated>
    <id>http://johnbintz.github.com/blog/2011/12/31/sketchbook-comic-bad-at-comebacks</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a comic I did in SketchBook for Android, which seriously needs more layers and
the ability to change the canvas size:</p>

<p><img src="http://johnbintz.github.com/assets/sketchbook-comics/dawn-bad-at-comebacks.jpg"><br /></p>

<p>Thanks to a certain boss of mine for providing the capacitive touch stylus.</p>
]]></content>
  </entry>
  
</feed>
